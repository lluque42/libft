.TH "include/ft_llst.h" 3 "Mon Feb 5 2024" "Version 2024-02-05" "Library libft" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/ft_llst.h
.SH SYNOPSIS
.br
.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBs_list\fP"
.br
.RI "Base for typedef \fBt_list\fP for a linked list node\&. "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBs_list\fP \fBt_list\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBt_list\fP * \fBft_lstnew\fP (void *content)"
.br
.RI "\fBft_lstnew\fP -- Create a list element from pointer to its content\&. "
.ti -1c
.RI "void \fBft_lstadd_front\fP (\fBt_list\fP **lst, \fBt_list\fP *new)"
.br
.RI "\fBft_lstadd_front\fP -- Adds node at the beginning of the list\&. "
.ti -1c
.RI "int \fBft_lstsize\fP (\fBt_list\fP *lst)"
.br
.RI "\fBft_lstsize\fP -- Counts the number of nodes in a list\&. "
.ti -1c
.RI "\fBt_list\fP * \fBft_lstlast\fP (\fBt_list\fP *lst)"
.br
.RI "\fBft_lstlast\fP -- Returns the last node of the list\&. "
.ti -1c
.RI "void \fBft_lstadd_back\fP (\fBt_list\fP **lst, \fBt_list\fP *new)"
.br
.RI "\fBft_lstadd_back\fP -- Adds node at the end of the list\&. "
.ti -1c
.RI "void \fBft_lstdelone\fP (\fBt_list\fP *lst, void(*del)(void *))"
.br
.RI "\fBft_lstdelone\fP -- Deletes and frees memory of item list and its content\&. "
.ti -1c
.RI "void \fBft_lstclear\fP (\fBt_list\fP **lst, void(*del)(void *))"
.br
.RI "\fBft_lstclear\fP -- Deletes and frees given node and succesors\&. (freeing contents)\&. "
.ti -1c
.RI "void \fBft_lstiter\fP (\fBt_list\fP *lst, void(*f)(void *))"
.br
.RI "\fBft_lstiter\fP -- Applies provided function f to the content of each node on list\&. "
.ti -1c
.RI "\fBt_list\fP * \fBft_lstmap\fP (\fBt_list\fP *lst, void *(*f)(void *), void(*del)(void *))"
.br
.RI "\fBft_lstmap\fP -- Returns new list based on applying f to each nodes content\&. "
.in -1c
.SH "Detailed Description"
.PP 
Linked list implementation\&. Part of libft library\&. 
.SH "Function Documentation"
.PP 
.SS "void ft_lstadd_back (\fBt_list\fP ** lst, \fBt_list\fP * new)"

.PP
\fBft_lstadd_back\fP -- Adds node at the end of the list\&. Adds the node ’new’ at the end of the list\&. If *lst == NULL the new node becomes the list\&.
.PP
\fBParameters\fP
.RS 4
\fIlst\fP - The address of a pointer to the first node of a list\&.
.br
\fInew\fP - A pointer to the node to be added to the list\&.
.RE
.PP
\fBWarning\fP
.RS 4
NO check is performed for NULL pointers passed as arguments\&. In such cases, CRASHING is guaranteed\&. TODO\&. This is not true, check with paco\&.\&.
.RE
.PP
\fBRemarks\fP
.RS 4
Implementation notes: 
.br
 Don't check for valid pointers\&. 
.RE
.PP

.SS "void ft_lstadd_front (\fBt_list\fP ** lst, \fBt_list\fP * new)"

.PP
\fBft_lstadd_front\fP -- Adds node at the beginning of the list\&. Adds the node ’new’ at the beginning of the list\&. If *lst == NULL the new node becomes the list\&.
.PP
\fBParameters\fP
.RS 4
\fIlst\fP - The address of a pointer to the first node of a list\&.
.br
\fInew\fP - A pointer to the node to be added to the list\&.
.RE
.PP
\fBWarning\fP
.RS 4
NO check is performed for NULL pointers passed as arguments\&. In such cases, CRASHING is guaranteed\&.
.RE
.PP
\fBRemarks\fP
.RS 4
Implementation notes: 
.br
 Don't check for valid pointers\&. 
.RE
.PP

.SS "void ft_lstclear (\fBt_list\fP ** lst, void(*)(void *) del)"

.PP
\fBft_lstclear\fP -- Deletes and frees given node and succesors\&. (freeing contents)\&. Deletes and frees the given node and every successor of that node, using the function ’del’ and free()\&. 
.br
 Finally, the pointer to the node is set to NULL\&.
.PP
\fBParameters\fP
.RS 4
\fIlst-\fP The address of a pointer to a node\&. If NULL, nothing is done\&. Is set to NULL by this function\&.
.br
\fIdel\fP - The address of the function that shall be used to properly free only the content of the node\&. This function must be capable of handling a NULL content pointer\&.
.RE
.PP
\fBWarning\fP
.RS 4
EXTERNAL FUNCTION USED: free()\&. 
.br
.RE
.PP
\fBRemarks\fP
.RS 4
Implementation notes: 
.br
 TODO (Paco-check this, it should crash)\&. 
.br
 If lst == NULL, nothing must be done\&. 
.br
 TODO (this makes sense, empty list)\&. 
.br
 If *lst == NULL, nothing must be done\&. 
.RE
.PP

.SS "void ft_lstdelone (\fBt_list\fP * lst, void(*)(void *) del)"

.PP
\fBft_lstdelone\fP -- Deletes and frees memory of item list and its content\&. Takes as a parameter a node and frees the memory of the node’s content using the function ’del’ given as a parameter and free the node\&. 
.br
 The memory of ’next’ must not be freed\&. This function may break a list if used without caution\&.
.PP
\fBParameters\fP
.RS 4
\fIlst\fP - A pointer to the node to be freed\&.
.br
\fIdel\fP - The address of the function that shall be used to properly free only the content of the node\&. This function must be capable of handling a NULL content pointer\&.
.RE
.PP
\fBWarning\fP
.RS 4
EXTERNAL FUNCTION USED: free()\&. 
.br
 The caller should set lst to NULL after freeing memory with this funcion\&. 
.br
 
.RE
.PP

.SS "void ft_lstiter (\fBt_list\fP * lst, void(*)(void *) f)"

.PP
\fBft_lstiter\fP -- Applies provided function f to the content of each node on list\&. Iterates the list ’lst’ and applies the function ’f’ on the content of each node\&.
.PP
\fBParameters\fP
.RS 4
\fIlst\fP - The address of a pointer to a node\&. If NULL nothing is done\&.
.br
\fIf\fP - The address of the function that shall be applied on every node's content while traversing the whole list\&. This function must be capable of handling a NULL content pointer\&.
.RE
.PP
\fBWarning\fP
.RS 4
NO check is performed for NULL pointers passed as arguments\&. In such cases, CRASHING is guaranteed\&. 
.RE
.PP

.SS "\fBt_list\fP * ft_lstlast (\fBt_list\fP * lst)"

.PP
\fBft_lstlast\fP -- Returns the last node of the list\&. Returns the last node of the list\&.
.PP
\fBParameters\fP
.RS 4
\fIlst\fP - A pointer to the first node of the list\&.
.RE
.PP
\fBReturns\fP
.RS 4
A pointer to the last node of the list\&. 
.br
 Returns NULL if lst == NULL\&. 
.RE
.PP

.SS "\fBt_list\fP * ft_lstmap (\fBt_list\fP * lst, void *(*)(void *) f, void(*)(void *) del)"

.PP
\fBft_lstmap\fP -- Returns new list based on applying f to each nodes content\&. Iterates the list ’lst’ and applies the function ’f’ on the content of each node\&. Creates a new list resulting of the successive applications of the function ’f’\&. The ’del’ function is used to delete the content of a node if needed\&. If at some point the funcion fails, the in-construction new list must is cleared completely and NULL pointer is returned\&.
.PP
If an error occurs while creating the new list, every memory is freed and a NULL is returned\&.
.PP
\fBParameters\fP
.RS 4
\fIlst\fP - The address of a pointer to a node\&. If NULL nothing is done and a NULL pointer is returned\&.
.br
\fIf\fP - The address of the function that shall be applied on every node's content while traversing the original list to return a pointer to the new content for every node of the new list\&. This function must be capable of handling a NULL content pointer\&. This function must allocate memory for the generated new contents\&. This function must return NULL if error\&.
.br
\fIdel\fP - The address of the function that shall be used to properly free only the content of the node\&. This function must be capable of handling a NULL content pointer\&. This function is used if an error occurs while creating the new list\&.
.RE
.PP
\fBReturns\fP
.RS 4
The new list\&. 
.br
 NULL if error occurs\&.
.RE
.PP
\fBWarning\fP
.RS 4
EXTERNAL FUNCTION USED: malloc(), free()\&. 
.br
 
.RE
.PP

.SS "\fBt_list\fP * ft_lstnew (void * content)"

.PP
\fBft_lstnew\fP -- Create a list element from pointer to its content\&. Allocates (with malloc()) and returns a new node\&. 
.br
 The member variable ’content’ is initialized with the value of the parameter ’content’\&. The variable ’next’ is initialized to NULL\&.
.PP
\fBParameters\fP
.RS 4
\fIcontent\fP - The content to create the node with\&.
.RE
.PP
\fBReturns\fP
.RS 4
The new node\&. 
.br
 Returns NULL if malloc() fails\&.
.RE
.PP
\fBWarning\fP
.RS 4
EXTERNAL FUNCTION USED: malloc()\&. 
.br
.RE
.PP
\fBRemarks\fP
.RS 4
Implementation notes: 
.br
 Argument content is NOT checked for NULL, a node with NULL content is returned\&. 
.br
 If malloc fails, must return NULL\&. 
.RE
.PP

.SS "int ft_lstsize (\fBt_list\fP * lst)"

.PP
\fBft_lstsize\fP -- Counts the number of nodes in a list\&. Counts the number of nodes in a list\&.
.PP
\fBParameters\fP
.RS 4
\fIlst\fP - A pointer to the first element of the list\&.
.RE
.PP
\fBReturns\fP
.RS 4
The length of the list\&. 
.br
 If lst == NULL a 0 value is returned\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Library libft from the source code\&.
